#!/usr/bin/env perl

##
## LFile:
##
## Perl-implementation of the safe-file copy code in slapd
##

package LFile;
use Symbol;
use Fcntl ':flock';
use IO::Lines;
use File::Modified;
use Sys::Hostname;

sub new
  {
    my $self = shift;
    my $class = ref $self || $self;

    my $this = bless {},$class;
    $this->open(@_);
  }

sub open($$)
  {
    my $self = shift;

    my $mode;
    my $file;
    if (2 == @_)
      {
	$mode = shift;
	$file = shift;
      }
    elsif (1 == @_)
      {
	$file = shift;
	$mode = '<';
      }
    else
      {
	die "Usage: LFile->open([$mode],$file)\n";
      }

    die "Nothing to open\n" unless $file;

    my $lockf = $self->lockfile($file);
    $self->{_lfh} = gensym;
    open($self->{_lfh},">$lockf")
      or die "Unable to open $lockf: $!\n";
    flock($self->{_lfh},LOCK_EX);
    $self->{_fh} = gensym;
    open($self->{_fh},$mode,$file)
      or die "Unable to open $file: $!\n";

    $self;
  }

sub DESTROY
  {
    $_[0]->close();
  }

sub lockfile
  {
    sprintf "%s.lock",$_[1];
  }

sub io
  {
    $_[0]->{_fh};
  }


sub close
  {
    flock($self->{_lfh},LOCK_UN);
    close($self->{_lfh});
    close($self->{_fh});
  }

##
## $0
##
## Loop over the entries in the replog (-l) and perform agents on the entries.
##

package main;

use IO::Handle;
use IO::Scalar;
use Getopt::Std;
use File::Temp qw(mktemp);
use Net::LDAP::LDIF;
use Config::IniFiles;
use JEvent;

sub lock_copy_file
  {
    my ($sf,$df,$trc,$filter) = @_;

    my $src = LFile->new($sf);
    my $dst = LFile->new(">>",$df);

    while ( defined ($_ = $src->io->getline ) )
      {
	$dst->io->print(&{$filter}($_));
      }

    if ($trc)
      {
        truncate $sf,0 or die "Unable to truncate $sf: $!\n";
      };

    $dst->close();
    $src->close();
  }

sub _filter_slapd_lines
  {
    return undef if $_[0] =~ /^(replica|time):/;
    $_[0]
  }

sub all_entries
  {
    my %args = @_;

    my $replog = $args{replog};
    my $truncate = $args{truncatefile};

    my $clog = mktemp("ldifwatch-tempXXXXXX");
    my $buplog;
    die "Unable to create temporary file\n" unless $clog;
    lock_copy_file($replog,$clog,$truncate,\&_filter_slapd_lines);

    my @res;

    open LOG,$clog || die $!;
    my $ldif = Net::LDAP::LDIF->new($clog,"r",onerror=>undef);
    while (not $ldif->eof)
      {
	my $e = $ldif->read_entry();
	push(@res,$e) if $e;
      }
    $ldif->done;
    close LOG;
    unlink $clog;
    unlink "$clog.lock";

    @res;
  }

my $usage=<<EOU;
Usage: $0 [-h] -c agent.ini

$0 Sample JEvent agent

SYNOPSIS

\t-c\tINI-style configuration file for this agent.
\t-h\tShow this text

EOU

getopts('c:hl:');
die $usage if $opt_h;
die $usage unless $opt_c;

die $usage unless -f $opt_c;

my $ini = Config::IniFiles->new(-file=>$opt_c)
  or die "Unable to read configuration from $opt_c: $!\n";

$opt_l = 'replog.log' unless $opt_l;
$opt_m = 100 unless $opt_m;

my $status = "running";
my $host = Sys::Hostname::hostname();
my %trace;
my @backlog;

my $d = File::Modified->new(files=>[$opt_l]);
my $je = JEvent->new(Config=>$opt_c
		     Description=>"Watching $opt_l on $host",
		     Commands=>{
				shutdown => sub {
				  $_[0]->LogInfo("Got shutdown from $_[1]");
				  closelog;
				  warn "Got shutdown from $_[1]. Bye...\n";
				  exit;
				},
				status => sub { $status; },
				pause => sub { $status = 'paused'; },
				resume => sub { $status = 'running'; },
                                trace => sub { $trace{$_[1]} = $_[2]; "Tracing to $_[1]" },
                                untrace => sub { delete $trace{$_[1]}; "No longer tracing to $_[1]"; },
				tracers => sub { join("\n",map { $_." (".$trace{$_}.")"} keys %trace); },
				backlog => sub { @backlog ? join(',',map { $_->dn } @backlog) : 'no backlog'; }
			       },
		     ProcessCB=>sub {
		       my ($self) = @_;

		       return unless $status eq 'running';

		       push(@backlog,all_entries(replog=>$opt_l,truncatefile=>$opt_T))
			 unless scalar @backlog > $opt_m;

		       while (@backlog)
			 {
			   my $e = shift @backlog;
			   my $data = "";
			   my $io = IO::Scalar->new(\$data);
			   my $out = Net::LDAP::LDIF->new($io,"w");
			   $out->write($e);

			   foreach my $t (keys %trace) {
			     $self->Client->MessageSend(to=>$t,type=>$trace{$t},body=>$data);
			   }

			   my $res = $self->Publish(Host=>$opt_P,
						    Node=>$opt_n,
						    Timeout=>10,
						    Content=>"<ldif><![CDATA[$data]]></ldif>");
			   if (!$res || $res->GetError)
			     {
			       $_[0]->LogWarn("Got error for dn=%s: %s",$e->dn,$res ? $res->GetErrorCode : 'unknown');
			       unshift(@backlog,$e);
			     }
			 }
		     });

$je->Run();
