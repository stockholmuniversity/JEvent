#!/usr/bin/env perl

use Getopt::Std;
use JEvent;

my $usage=<<EOU;
Usage: $0 [-h] [-c CA File] [-C CA Dir] [-s] [-t <timeout>] [-S spocp:port] -j <jid> -p <password> -P <pubsub host> -n <node>

$0 Sample JEvent agent

SYNOPSIS

\t-j\tThe JID to authenticate as
\t-p\tThe password for this JID
\t-P\tThe domainame of the pubsub service
\t-n\tThe name of the pubsub node to publish at
\t-c\tThe OpenSSL CA-file used to verify the server
\t-C\tThe OpenSSL CA-directory used to verify the server
\t-s\tUse TLS to connect (requires -c or -C)
\t-S\tUse this SPOCP server to authorize requests
\t-t\tSleep this number of seconds between processing
\t-h\tShow this text

EOU

getopts('l:hj:p:P:n:C:c:sS:') or
  die $usage;

die $usage if $opt_h;

my $host = Sys::Hostname::hostname();
my $je = JEvent->new(Usage=>"Testclient on $host",
		     JID=>$opt_j,
		     SPOCPServer=>$opt_S,
		     Password=>$opt_p,
		     CAFile=>$opt_c,
		     CADir=>$opt_C,
		     UseTLS=>$opt_s ? 1 : 0,
		     ProcessTimeout=>$opt_t,
		     Commands=>{
				shutdown => sub {
				  my ($self,$from,$type,$cmd,@args) = @_;
				  $self->LogInfo("Got shutdown from $_[1]");
				  warn "Got shutdown from $_[1]. Bye...\n";
				  exit;
				},
				publish => sub {
				  my ($self,$from,$type,$cmd,@args) = @_;
				  $self->LogInfo("Got publish request from $_[0]");
				  foreach my $xml (@args)
				    {
				      $self->Publish(Host=>$opt_P,Node=>$opt_n,Content=>$xml);
				    }
				}
			       },
		     ProcessCB=>sub {
		       my $now = scalar localtime;
		       $_[0]->Publish(Host=>$opt_P,
				      Node=>$opt_n,
				      Content=>"<tick timestamp='$now'/>");
		     });

$je->Run();
