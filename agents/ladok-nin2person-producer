#!/usr/bin/env perl

use Getopt::Std;
use Config::IniFiles;
use JEvent::RDF;
use OOL;
use Unicode::String qw(latin1 utf8);

my $usage=<<EOU;
Usage: $0 [-h] -c agent.ini [-o </etc>]

$0 Sample JEvent agent

SYNOPSIS

\t-c\tINI-style configuration file for this agent.
\t-o\tDirectory where odbc.ini and odbcinst.ini is
\t-h\tShow this text

Apart from the common ini-arguments this agents expects information
about the connection to LADOK:

[LADOK]
db = database name
dsn = DBI-datasource
dbuser = login
dbpass = pass

EOU

getopts('c:h:o:');
die $usage if $opt_h;
die $usage unless $opt_c;

die "ODBC System directory $opt_o is not a directory\n" if $opt_o && ! -d $opt_o;

$ENV{ODBCSYSINI} = $opt_o || '/etc';
$ENV{ODBCINI} = $ENV{ODBCSYSINI}."/odbc.ini";

my $ini = Config::IniFiles->new(-file=>$opt_c)
  or die "Unable to read $opt_c\n";
OOL->db($ini->val('LADOK','db'));
OOL->connection($ini->val('LADOK','dsn'),$ini->val('LADOK','dbuser'),$ini->val('LADOK','dbpass'));

sub publishPersonInfo
  {
    my ($self,$nin) = @_;
    my $p = OOL::Person->retrieve(pnr=>$nin);
    $self->LogError("No such person in LADOK: $nin"),return undef unless $p;

    my $model = $self->model;
    my $subject = RDF::Core::Resource->new("urn:x-ladok:identifiers:personnummer:$nin");

    # The request header
    my $reqr = RDF::Core::Resource->new("urn:x-su:jevent:directory");
    $model->addStmt(RDF::Core::Statement->new($reqr,
					      $reqr->new("urn:x-su:jevent:directory:object"),
					      $subject));

    $model->addStmt(RDF::Core::Statement->new($reqr,
					      $reqr->new("urn:x-su:jevent:directory:identifier"),
					      RDF::Core::Literal->new("socialSecurityNumber")));

    # The data description
    $model->addStmt(RDF::Core::Statement->new($subject,
					      $subject->new("urn:x-su:ldap:schema:norEduPersonNIN"),
					      RDF::Core::Literal->new($nin)));
    $model->addStmt(RDF::Core::Statement->new($subject,
                                              $subject->new("urn:x-su:ldap:schema:socialSecurityNumber"),
					      RDF::Core::Literal->new($nin)));
    foreach my $oc qw(top person inetOrgPerson eduPerson norEduPerson ssnObject)
      {
	$model->addStmt(RDF::Core::Statement->new($subject,
						  $subject->new("urn:x-su:ldap:schema:objectClass"),
						  RDF::Core::Literal->new($oc)));
      }

    my $sn = $p->getNameAsUTF8('enamn');
    my $givenName = $p->getNameAsUTF8('tnamn');
    $model->addStmt(RDF::Core::Statement->new($subject,
					      $subject->new("urn:x-su:ldap:schema:sn"),
					      RDF::Core::Literal->new($sn)));
    $model->addStmt(RDF::Core::Statement->new($subject,
					      $subject->new("urn:x-su:ldap:schema:givenName"),
					      RDF::Core::Literal->new($givenName)));
    $self->PublishModel(Model=>$model);
  }

my $host = Sys::Hostname::hostname();
my $je = JEvent::RDF->new(Config=>$ini,
			  Commands=>{
				     shutdown => sub {
				       my ($self,$from,$type,$cmd,@args) = @_;
				       $self->LogInfo("Got shutdown from $_[1]");
				       warn "Got shutdown from $_[1]. Bye...\n";
				       exit;
				     },
				     sync => sub {
				       my ($self,$from,$type,$cmd,@args) = @_;
				       foreach (@args)
					 {
					   publishPersonInfo($self,$_);
					 }
				     }
				    },
			  RDFCB => sub {
			    my ($self,$model) = @_;
			    my $nins = $model->getObjects("urn:x-su:ldap:schema:norEduPersonNIN");
			    return unless ref $nins eq 'ARRAY';
			    foreach my $litt (@{$nins})
			      {
				publishPersonInfo($self,$litt->getValue());
			      }
			  });

$je->Run();
